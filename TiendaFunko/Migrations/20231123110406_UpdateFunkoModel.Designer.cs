// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaFunko.Models;

#nullable disable

namespace TiendaFunko.Migrations
{
    [DbContext(typeof(TiendaFunkoContext))]
    [Migration("20231123110406_UpdateFunkoModel")]
    partial class UpdateFunkoModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TiendaFunko.Models.Clasificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Clasificacion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Star Wars"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Pokemon"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Harry Poter"
                        });
                });

            modelBuilder.Entity("TiendaFunko.Models.FacturaProducto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("FacturacionId")
                        .HasColumnType("int");

                    b.Property<int>("FunkoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FacturacionId");

                    b.HasIndex("FunkoId");

                    b.ToTable("FacturaProducto");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Facturacion");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasificacionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DescriptionImg")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DescriptionImgCaja")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImgCaja")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClasificacionId");

                    b.ToTable("Funko");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClasificacionId = 1,
                            Description = "Figura coleccionable Funko de un Stromtrooper",
                            DescriptionImg = "Figura coleccionable Funko de un Stromtrooper",
                            DescriptionImgCaja = "Figura coleccionable Funko de un Stromtrooper en caja",
                            Img = "../../img/star-wars/trooper-1.webp",
                            ImgCaja = "../../img/star-wars/trooper-box.webp",
                            Name = "Stormtrooper Lightsaber",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2,
                            ClasificacionId = 2,
                            Description = "Figura coleccionable Funko de Pidgeotto",
                            DescriptionImg = "Figura coleccionable Funko de Pidgeotto",
                            DescriptionImgCaja = "Figura coleccionable Funko de Pidgeotto en caja",
                            Img = "../../img/pokemon/pidgeotto-1.webp",
                            ImgCaja = "../../img/pokemon/pidgeotto-box.webp",
                            Name = "Pidgeotto",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 3,
                            ClasificacionId = 3,
                            Description = "Figura coleccionable Funko de Luna Lovegood",
                            DescriptionImg = "Figura coleccionable Funko de Luna Lovegood",
                            DescriptionImgCaja = "Figura coleccionable Funko de Luna Lovegood en caja",
                            Img = "../../img/harry-potter/luna-1.webp",
                            ImgCaja = "../../img/harry-potter/luna-box.webp",
                            Name = "Luna Lovegood Lion Mask",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 4,
                            ClasificacionId = 2,
                            Description = "Figura coleccionable Funko de Charmander",
                            DescriptionImg = "Figura coleccionable Funko de Charmander",
                            DescriptionImgCaja = "Figura coleccionable Funko de Charmander en caja",
                            Img = "../../img/pokemon/charmander-1.webp",
                            ImgCaja = "../../img/pokemon/charmander-box.webp",
                            Name = "Charmander",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 5,
                            ClasificacionId = 3,
                            Description = "Figura coleccionable Funko de Harry Potter",
                            DescriptionImg = "Figura coleccionable Funko de Harry Potter",
                            DescriptionImgCaja = "Figura coleccionable Funko de Harry Potter en caja",
                            Img = "../../img/harry-potter/harry-1.webp",
                            ImgCaja = "../../img/harry-potter/harry-box.webp",
                            Name = "Harry Potter",
                            Price = 1799.99m,
                            Stock = 0
                        },
                        new
                        {
                            Id = 6,
                            ClasificacionId = 1,
                            Description = "Figura coleccionable Funco de Baby Yoda",
                            DescriptionImg = "Figura coleccionable Funco de Baby Yoda",
                            DescriptionImgCaja = "Figura coleccionable Funco de Baby Yoda en caja",
                            Img = "../../img/star-wars/baby-yoda-1.webp",
                            ImgCaja = "../../img/star-wars/baby-yoda-box.webp",
                            Name = "Baby Yoda",
                            Price = 1799.99m,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("TiendaFunko.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "Lascares",
                            Direccion = "San Juan 1349",
                            Dni = 37685225,
                            Email = "mariano.lascares@gmail.com",
                            Nombre = "Mariano",
                            Password = "123456789",
                            User = "MLascares"
                        });
                });

            modelBuilder.Entity("TiendaFunko.Models.FacturaProducto", b =>
                {
                    b.HasOne("TiendaFunko.Models.Facturacion", "FacturacionNavigation")
                        .WithMany("FacturaProductoNavigation")
                        .HasForeignKey("FacturacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaFunko.Models.Funko", "FunkoNavigation")
                        .WithMany("FacturaProductoNavigation")
                        .HasForeignKey("FunkoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturacionNavigation");

                    b.Navigation("FunkoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.HasOne("TiendaFunko.Models.Usuario", "UsuarioNavigation")
                        .WithOne("FacturacionNavigation")
                        .HasForeignKey("TiendaFunko.Models.Facturacion", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.HasOne("TiendaFunko.Models.Clasificacion", "ClasificacionNavigation")
                        .WithMany("Funko")
                        .HasForeignKey("ClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasificacionNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Clasificacion", b =>
                {
                    b.Navigation("Funko");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.Navigation("FacturaProductoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.Navigation("FacturaProductoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Usuario", b =>
                {
                    b.Navigation("FacturacionNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
