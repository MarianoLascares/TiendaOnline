// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiendaFunko.Models;

#nullable disable

namespace TiendaFunko.Migrations
{
    [DbContext(typeof(TiendaFunkoContext))]
    [Migration("20231121173042_UpdateDatabase")]
    partial class UpdateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TiendaFunko.Models.Clasificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Clasificacion");
                });

            modelBuilder.Entity("TiendaFunko.Models.FacturaProducto", b =>
                {
                    b.Property<int>("FacturacionId")
                        .HasColumnType("int");

                    b.Property<int>("FunkoId")
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("FacturacionId", "FunkoId")
                        .HasName("PK_FacturaProducto");

                    b.HasIndex("FunkoId");

                    b.ToTable("FacturaProducto");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Facturacion");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClasificacionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DescriptionImg")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DescriptionImgCaja")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ImgCaja")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClasificacionId");

                    b.ToTable("Funko");
                });

            modelBuilder.Entity("TiendaFunko.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Dni")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("TiendaFunko.Models.FacturaProducto", b =>
                {
                    b.HasOne("TiendaFunko.Models.Facturacion", "FacturacionNavigation")
                        .WithMany("FacturaProductoNavigation")
                        .HasForeignKey("FacturacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiendaFunko.Models.Funko", "FunkoNavigation")
                        .WithMany("FacturaProductoNavigation")
                        .HasForeignKey("FunkoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturacionNavigation");

                    b.Navigation("FunkoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.HasOne("TiendaFunko.Models.Usuario", "UsuarioNavigation")
                        .WithOne("FacturacionNavigation")
                        .HasForeignKey("TiendaFunko.Models.Facturacion", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.HasOne("TiendaFunko.Models.Clasificacion", "ClasificacionNavigation")
                        .WithMany("Funko")
                        .HasForeignKey("ClasificacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClasificacionNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Clasificacion", b =>
                {
                    b.Navigation("Funko");
                });

            modelBuilder.Entity("TiendaFunko.Models.Facturacion", b =>
                {
                    b.Navigation("FacturaProductoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Funko", b =>
                {
                    b.Navigation("FacturaProductoNavigation");
                });

            modelBuilder.Entity("TiendaFunko.Models.Usuario", b =>
                {
                    b.Navigation("FacturacionNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
